Diego Arturo Morales Gonzalez
Grupo: 4CM4
Proyecto 3 - Servidor de Archivos

************************************
Cliente.cpp

#include "Solicitud.h"
#include <iostream>
#include <stdlib.h>
#include <fstream>

using namespace std;

#define TAM_MAX_DATA 3500

int main(int argc, char*argv[]) {

    if (argc < 4) {
        cout << "Insertar lo siguiente: IP | Puerto | Nombre del archivo" << endl;
        exit(EXIT_FAILURE);
    }

    char *address = const_cast<char *>(argv[1]);
    ushort port = atoi(argv[2]);
    char *fileName = const_cast<char *>(argv[3]);

    ifstream file(fileName, std::ifstream::binary);

    if (!file) {
        std::cerr << "Error al abrir archivo" << endl;
        exit(EXIT_FAILURE);
    }

    char buffer[TAM_MAX_DATA];
    char *archivoEnviar;
    std::streamsize bytesRead;
    std::streamsize bytesWritten;
    
    Solicitud solicitud;

    cout << "Enviando Archivo: '" << fileName << endl;

    //int cont = 0;

    while (!file.eof()) {
        file.read(buffer, sizeof(buffer));
        bytesRead = file.gcount();

        //cout << "Total de bytes a enviar: " << bytesRead << endl;
        //cout << "Enviando..." << endl;

        int operation = 1;

        archivoEnviar = solicitud.doOperation(address, port, operation, buffer, bytesRead);

        bytesWritten = *reinterpret_cast<streamsize *>(archivoEnviar);

        cout << "BytesWritten: " << bytesWritten << endl;
        //cout << "->" << cont << endl;
        //cont++;

        if (bytesWritten != bytesRead) {
            cout << "Error" << endl;
            exit(EXIT_FAILURE);
        }
    }

    archivoEnviar = solicitud.doOperation(address, port, 2, NULL, 0);

    bytesWritten = *reinterpret_cast<streamsize *>(archivoEnviar);
    cout << "Se envio el archivo correctamente" << endl;

    return 0;
}

************************************
Solicitud.cpp

#include "SocketDatagrama.h"
#include "Solicitud.h"
#include "mensaje.h"

Solicitud::Solicitud() {
    socketlocal = new SocketDatagrama(0);
}

char * Solicitud::doOperation(char* IP, int puerto, int operationId, char* arguments, int length) {
    struct mensaje msj;
    msj.messageType = 0;
    msj.requestId = id;
    id++;
    memcpy(msj.IP, IP, 16);
    msj.puerto = puerto;
    msj.lengthBytes = length;
    msj.operationId = operationId;

    if (arguments == NULL) {
        std::fill(msj.arguments, msj.arguments + TAM_MAX_DATA, 0);
    } else {
        std::copy(arguments, arguments + length, msj.arguments);
    }

    //copy(arguments, arguments + length, msj.arguments);

    PaqueteDatagrama paq(reinterpret_cast<char *>(&msj), sizeof(struct mensaje), IP, puerto, length);

    //cout << "===>" << paq.obtieneLengthBytes() << endl;

    socketlocal->envia(paq);
    
    PaqueteDatagrama paq1(TAM_MAX_DATA);
    socketlocal->recibe(paq1);

    char* resultado;
    resultado = paq1.obtieneDatos();

    return resultado;
}

************************************
Solicitud.h

#ifndef __Solicitud__
#define __Solicitud__

#include "SocketDatagrama.h"
#include <iostream>
#include <cstring>

using namespace std;

class Solicitud {
    
public:
    Solicitud();
    char * doOperation(char *IP, int puerto, int operationId, char *arguments, int length);
    
private:
    SocketDatagrama *socketlocal;
    unsigned int id = 1;
};

#endif

************************************
Servidor.cpp

#include <cstdlib>
#include <string>
#include <cstring>
#include <fstream>
#include <iostream>
#include "Respuesta.h"

using namespace std;

int main(int argc, char const *argv[]) {

  if (argc < 3) {
      std::cerr << "Insertar lo siguiente: puerto | Nombre de archivo" << endl;
      exit(EXIT_FAILURE);
  }

  const short puerto = atoi(argv[1]);
  const char *fileName = const_cast<char *>(argv[2]);

  Respuesta respuesta(puerto);
  struct mensaje mensajeRecibido;
  std::ofstream file(fileName, std::fstream::binary);
  std::streamsize beforeWrite = 0;
  std::streamsize bytesWritten;

  if (!file) {
      cout << "Error" << endl;
      exit(EXIT_FAILURE);
  }

  //int cont = 0;

  cout << "Esperando clientes..." << endl;

  while(1) {
      memcpy(&mensajeRecibido, respuesta.getRequest(), sizeof(struct mensaje));
      //mensajeRecibido = respuesta.getRequest();
      //cout << "Llego cliente" << endl;

      if (mensajeRecibido.operationId == 1) {
          //cout << "mensaje: " << mensajeRecibido.arguments << endl;
          //cout << "tamanio: " << mensajeRecibido.lengthBytes << endl;
          file.write(mensajeRecibido.arguments, mensajeRecibido.lengthBytes);
          bytesWritten = file.tellp() - beforeWrite;
          respuesta.sendReply(reinterpret_cast<char *>(&bytesWritten), mensajeRecibido.IP, mensajeRecibido.puerto, bytesWritten);
          beforeWrite += bytesWritten;
          cout << "Se escribieron: " << file.tellp() << " bytes" << endl;
          //cout << "->" << cont << endl;
          //cont++;
      } else if (mensajeRecibido.operationId == 2) {
          cout << "Archivo recibido con exito" << endl;
          respuesta.sendReply(reinterpret_cast<char *>(&beforeWrite), mensajeRecibido.IP, mensajeRecibido.puerto, beforeWrite);
          file.close();
      }
  }

    return 0;
}

************************************
Respuesta.cpp

#include "SocketDatagrama.h"
#include "Respuesta.h"

Respuesta::Respuesta(int pl) {
    socketlocal = new SocketDatagrama(pl);
}

struct mensaje* Respuesta::getRequest() {
    PaqueteDatagrama paq(TAM_MAX_DATA);
    socketlocal->recibe(paq);
    msj = (struct mensaje*) paq.obtieneDatos();
    msj->puerto = paq.obtienePuerto();
    //cout << "->" << msj->lengthBytes << endl;
    //cout << "-->" << msj->operationId << endl;
    memcpy(msj->IP,paq.obtieneDireccion(),16);
    return msj;
}

void Respuesta::sendReply(char * respuesta, char * ipCliente, int puertoCliente, int lengthBytes) {
    struct mensaje *m1;
    m1 = (struct mensaje *) respuesta;
    PaqueteDatagrama paq((char*) m1, sizeof(struct mensaje), ipCliente, puertoCliente, lengthBytes);
    socketlocal->envia(paq);
}

************************************
Respuesta.h

#ifndef __Respuesta__
#define __Respuesta__

#include "SocketDatagrama.h"
#include "mensaje.h"
#include <cstring>

using namespace std;

class Respuesta {
    
public:
    Respuesta(int pl);
    struct mensaje *getRequest(void);
    void sendReply(char *respuesta, char *ipCliente, int puertoCliente, int lengthBytes);
    
private:
    SocketDatagrama *socketlocal;
    struct mensaje *msj;
};

#endif

************************************
PaqueteDatagrama.cpp

#include "PaqueteDatagrama.h"

PaqueteDatagrama::PaqueteDatagrama(char * cadena, unsigned int tam, char * dir, int port, int bytesL)
:longitud(tam),puerto(port),lengthBytes(bytesL)
{
    datos = new char[tam];
    memcpy(datos,cadena,tam);
    strcpy(ip,dir);
}

PaqueteDatagrama::PaqueteDatagrama(unsigned int tam):longitud(tam)
{
    datos = new char[tam];
}

PaqueteDatagrama::~PaqueteDatagrama()
{
    delete [] datos;
}

char * PaqueteDatagrama::obtieneDireccion()
{
    return ip;
}

unsigned int PaqueteDatagrama::obtieneLongitud()
{
    return longitud;
}

int PaqueteDatagrama::obtienePuerto()
{
    return puerto;
}

char * PaqueteDatagrama::obtieneDatos()
{
    return datos;
}

void PaqueteDatagrama::inicializaPuerto(int port)
{
    puerto = port;
}

void PaqueteDatagrama::inicializaIp(char * dir)
{
    strcpy(ip,dir);
}

void PaqueteDatagrama::inicializaDatos(char * cadena)
{
    memcpy(datos,cadena,longitud);
}

int PaqueteDatagrama::obtieneLengthBytes(){
    return lengthBytes;
}

void PaqueteDatagrama::inicializaLengthBytes(int lengthB){
    lengthBytes = lengthB;
}

************************************
PaqueteDatagrama.h

#ifndef __PaqueteDatagrama__
#define __PaqueteDatagrama__

#include <iostream>
#include <cstring>

using namespace std;

class PaqueteDatagrama {
    
public:
    PaqueteDatagrama(char *, unsigned int, char *, int, int);
    PaqueteDatagrama(unsigned int );
    ~PaqueteDatagrama();
    char *obtieneDireccion();
    unsigned int obtieneLongitud();
    int obtienePuerto();
    char *obtieneDatos();
    void inicializaPuerto(int);
    void inicializaIp(char *);
    void inicializaDatos(char *);
    int obtieneLengthBytes();
    void inicializaLengthBytes(int);
    
private:
    char *datos;
    char ip[16];
    unsigned int longitud;
    int puerto;
    int lengthBytes;
};
#endif

************************************
SocketDatagrama.cpp

#include "SocketDatagrama.h"


SocketDatagrama::SocketDatagrama(int puerto)
{
    s = socket(AF_INET, SOCK_DGRAM, 0);
    bzero((char *)&direccionLocal, sizeof(direccionLocal));
    direccionLocal.sin_family = AF_INET;
    direccionLocal.sin_addr.s_addr = INADDR_ANY;
    direccionLocal.sin_port = htons(puerto);
    bind(s, (struct sockaddr *)&direccionLocal,sizeof(direccionLocal));
}

SocketDatagrama::~SocketDatagrama()
{
    //close(s);
}


int SocketDatagrama::recibe(PaqueteDatagrama & p)
{
    unsigned int addr_len = sizeof(direccionForanea);
    bzero((char *)&direccionForanea, sizeof(direccionForanea));
    int regreso = recvfrom(s,p.obtieneDatos(),p.obtieneLongitud(), 0, (struct sockaddr *) &direccionForanea, &addr_len);
    p.inicializaPuerto(ntohs(direccionForanea.sin_port));
    p.inicializaIp(inet_ntoa(direccionForanea.sin_addr));
    return regreso;
}


int SocketDatagrama::envia(PaqueteDatagrama & p)
{
    bzero((char *)&direccionForanea, sizeof(direccionForanea));
    direccionForanea.sin_family = AF_INET;
    direccionForanea.sin_addr.s_addr = inet_addr(p.obtieneDireccion());
    direccionForanea.sin_port = htons(p.obtienePuerto());
    return sendto(s,p.obtieneDatos(), p.obtieneLongitud(), 0, (struct sockaddr *) &direccionForanea, sizeof(direccionForanea));
}

************************************
SocketDatagrama.h

#ifndef __SocketDatagrama__
#define __SocketDatagrama__

#include <iostream>
#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <netinet/in.h>
#include <netdb.h>
#include <strings.h>
#include "PaqueteDatagrama.h"
#include <arpa/inet.h>
#include <cstring>

class SocketDatagrama{

public:
    SocketDatagrama(int = 0);
    ~SocketDatagrama();
    
    int recibe(PaqueteDatagrama & p);
    
    int envia(PaqueteDatagrama & p);
private:
    struct sockaddr_in direccionLocal;
    struct sockaddr_in direccionForanea;
    int s;
};

#endif

************************************
mensaje.h

#ifndef __mensaje__
#define __mensaje__

#define TAM_MAX_DATA 2000

struct mensaje {
    int messageType;        //0 = Solicitud, 1 = Respuesta
    unsigned int requestId; //Identificador del mensaje
    char IP[16];
    int puerto;
    int lengthBytes;
    int operationId;        //Identificador del mensaje
    char arguments[TAM_MAX_DATA];
};

#endif

************************************
MakefileCliente.makefile

Cliente: Cliente.cpp Solicitud.o SocketDatagrama.o PaqueteDatagrama.o
    g++ Cliente.cpp Solicitud.o SocketDatagrama.o PaqueteDatagrama.o -o Cliente
Solicitud.o: Solicitud.cpp Solicitud.h
    g++ Solicitud.cpp -c
SocketDatagrama.o: SocketDatagrama.cpp SocketDatagrama.h
    g++ SocketDatagrama.cpp -c
PaqueteDatagrama.o: PaqueteDatagrama.cpp  PaqueteDatagrama.h
    g++ PaqueteDatagrama.cpp -c

************************************
MakefileServidor.makefile

Servidor: Servidor.cpp Respuesta.o SocketDatagrama.o PaqueteDatagrama.o
    g++ Servidor.cpp Respuesta.o SocketDatagrama.o PaqueteDatagrama.o -o Servidor
Respuesta.o: Respuesta.cpp Respuesta.h
    g++ Respuesta.cpp -c
SocketDatagrama.o: SocketDatagrama.cpp SocketDatagrama.h
    g++ SocketDatagrama.cpp -c
PaqueteDatagrama.o: PaqueteDatagrama.cpp  PaqueteDatagrama.h
    g++ PaqueteDatagrama.cpp -c


